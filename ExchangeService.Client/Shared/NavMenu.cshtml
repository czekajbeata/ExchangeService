@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@inject HttpClient Http
@inject TokenService tokenService

<nav class="navbar navbar-expand-lg navbar-dark bg-dark" style="padding-left:12.5%; padding-right:12.5%">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navBarData" aria-controls="navBarData" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <a class="navbar-brand" href="#">Home</a>
        <div class="collapse navbar-collapse" id="navBarData">
            <form class="form-inline">
                <input class="form-control mr-sm-2" type="search" placeholder="Search game" aria-label="Search" bind="@Search" />
                <button class="btn btn-outline-success my-2 my-sm-0" onclick="SearchGames()">Search</button>
            </form>
            <ul class="navbar-nav ml-auto">
                @if (!isUserLogged)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/register">Register </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/login">Login</a>
                    </li>
                }
                else
                {
                    <li class="nav-item dropdown @(isDropdownOpen ? "show" : string.Empty)">
                        <a class="nav-link dropdown-toggle" id="myProfile" data-toggle="dropdown" onclick="@ToggleNavDropdown" aria-haspopup="true" aria-expanded="@(isDropdownOpen ? "true" : "false")">
                            @loggedUser.Name @loggedUser.Surname
                        </a>
                        <div class="dropdown-menu @(isDropdownOpen ? "show" : string.Empty)" aria-labelledby="myProfile">
                            <a class="dropdown-item" href="/myprofile">Profile page</a>
                            <a class="dropdown-item" href="/myexchanges">My exchanges</a>
                            <a class="dropdown-item" href="#">My matches</a>
                            <a class="dropdown-item" href="/logout">Log out</a>
                        </div>
                    </li>
                }
            </ul>
        </div>
</nav>


@functions {
    bool isDropdownOpen = false;
    bool isUserLogged = false;
    UserView loggedUser = new UserView();
    string Search { get; set; } = "";

    void ToggleNavDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    protected override async Task OnInitAsync()
    {
        var token = await tokenService.GetAccessToken();
        Http.DefaultRequestHeaders.Add("Authorization", String.Format("Bearer {0} ", token));
        loggedUser = await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/myprofile");
        if(loggedUser != null)
        {
            isUserLogged = true;
        }
    }

    private void SearchGames()
    {
        Console.WriteLine("current search: " + Search);
    }
}
