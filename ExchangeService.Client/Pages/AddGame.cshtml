@using ExchangeService.Shared.Resources;
@page "/addgame"
@inject HttpClient Http

<h1>Add game for exchange</h1>
<input type="text" bind="@GameTitle"/>

@if (gameWasSearched)
{
    @if (response != null && response.Length > 0)
    {
        <p>Select game from existing or add a new one:</p>
        <select bind="@SelectedId">
            <option selected disabled>...</option>
            @foreach (var game in response)
            {
                <option value="@game.Id">@game.Name</option>
            }
        </select>
    }
    <button onclick=@(() => AddNewGame())>Add new game</button>
    
    @if (gameDetails != null)
    {
        <p>@gameDetails.Title</p>
    }

}





@functions {

    private string gameTitle { get; set; }
    DropDownItem[] response;
    bool gameWasSearched = false;

    public string GameTitle
    {
        get => gameTitle;
        set
        {
            gameTitle = value;
            FillAutoComplete().ConfigureAwait(false);
            StateHasChanged();
        }
    }

    string selectedId = null;

    public string SelectedId
    {
        get => selectedId;
        set
        {
            selectedId = value;
            GetGameDetails().ConfigureAwait(false);
        }
    }


    GameDto gameDetails = null;
    bool editableDetails = true;

    private async Task FillAutoComplete()
    {
        response = await Http.GetJsonAsync<DropDownItem[]>("http://localhost:5000/api/games/" + GameTitle);
        SelectedId = null;
        gameWasSearched = true;
        StateHasChanged();
    }

    private void AddNewGame()
    {
        gameDetails = new GameDto();
    }

    private async Task GetGameDetails()
    {
        gameDetails = await Http.GetJsonAsync<GameDto>("http://localhost:5000/api/games/get/" + SelectedId);
        editableDetails = false;
        StateHasChanged();
    }
}
