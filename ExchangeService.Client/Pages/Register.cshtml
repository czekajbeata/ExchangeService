@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@page "/register"
@inject HttpClient Http
@inject TokenService tokenService
@inject ReloadService reloadService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

@if (!isRegistered)
{
    <form>
        <h1>Register</h1>
        <div class="form-group">
            <label for="email">Email</label>
            <div class="col-sm-6">
                <input type="text" name="email" placeholder="Email" class="form-control" bind="@Email" />
                @if (!isEmailValid)
                {
                    <p class="font-italic" style="color: red">User with that e-mail is already registered.</p>
                }
            </div>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <div class="col-sm-6">
                <input type="password" name="password" placeholder="Password" class="form-control" bind="@Password" />
            </div>
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm password</label>
            <div class="col-sm-6">
                <input type="password" name="confirmPassword" placeholder="Confirm password" class="form-control" bind="@ConfirmPassword" />
            </div>
        </div>

        @if (errors.Count() > 0)
        {
            <br />
            <div class="alert alert-danger" role="alert">
                <br />
                @foreach (var error in errors)
                {
                    <p class="font-italic">@error</p>
                }
            </div>
        }
        <br /><br />
        <button type="button" class="btn btn-primary" onclick="@RegisterAccount">Create an account</button>
    </form>
}
else
{
    <h2>Thank you for registering!</h2>
    <h3>Plese provide additional details before you get started:</h3>
    <br />
    <ValidateProfile OnSubmit="SubmitForm" UserProfile="Profile">
        <div class="row">
            <div class="col-sm-3">
                <button type="submit" class="btn btn-primary btn-block">Create profile</button>
            </div>
        </div>
    </ValidateProfile>
}


@functions{
    public UserView Profile { get; set; } = new UserView();
    public string Email { get; set; } = "";
    public string Password { get; set; } = "";
    public string ConfirmPassword { get; set; } = "";
    public bool isRegistered = false;
    public bool isValid = false;
    public List<string> errors = new List<string>();
    const int MIN_LENGTH = 8;
    const int MAX_LENGTH = 15;
    bool isEmailValid = true;

    protected override void OnInit()
    {
        if (appState.IsUserLoggedIn)
        {
            UriHelper.NavigateTo($"/alreadylogged");
        }
    }

    private async Task RegisterAccount()
    {
        errors.Clear();
        ValidateInputs();
        await IsEmailUnique();
        if (isValid && isEmailValid)
        {
            var tokenvm = new TokenViewModel
            {
                Email = Email,
                Password = Password
            };
            await Http.PostJsonAsync("http://localhost:5000/api/token/register", tokenvm);
            var response = await Http.PostJsonAsync<TokenResponse>("http://localhost:5000/api/token/login", tokenvm);
            await tokenService.SaveAccessToken(response.Token);
            appState.LogUser(response.Token);
            if (!string.IsNullOrEmpty(await tokenService.GetAccessToken()))
            {
                isRegistered = true;
                Profile.ContactEmail = Email;
                StateHasChanged();
            }
        }
    }

    private void ValidateInputs()
    {
        if (!Email.Contains("@"))
            errors.Add("Email has invalid format.");
        if (!Password.Equals(ConfirmPassword))
            errors.Add("Passwords do not match.");
        if (Password.Length < MIN_LENGTH || Password.Length > MAX_LENGTH)
            errors.Add("Passwords lenght has to be between " + MIN_LENGTH + " and " + MAX_LENGTH + ".");

        bool hasUpperCaseLetter = false;
        bool hasLowerCaseLetter = false;
        bool hasDecimalDigit = false;
        bool hasSymbol = false;
        foreach (char c in Password)
        {
            if (char.IsUpper(c)) hasUpperCaseLetter = true;
            else if (char.IsLower(c)) hasLowerCaseLetter = true;
            else if (char.IsDigit(c)) hasDecimalDigit = true;
            else if (!char.IsLetterOrDigit(c)) hasSymbol = true;
        }
        if (!hasUpperCaseLetter)
            errors.Add("Password has to contain at least one upper case letter.");
        if (!hasLowerCaseLetter)
            errors.Add("Password has to contain at least one lower case letter.");
        if (!hasDecimalDigit)
            errors.Add("Password has to contain at least one digit.");
        if (!hasSymbol)
            errors.Add("Password has to contain at least one symbol.");

        isValid = errors.Count() == 0;
        StateHasChanged();
    }

    private async Task<bool> IsEmailUnique()
    {
        Console.WriteLine("check email");
        var userExists = await Http.GetJsonAsync<bool>("http://localhost:5000/api/users/exists/" + Email);
        isEmailValid = userExists ? false : true;
        return isEmailValid;
    }

    private class TokenResponse
    {
        public string Token;
    }

    private async Task SubmitForm(UIEventArgs args)
    {
        await Http.PostJsonAsync("http://localhost:5000/api/users/profile", Profile);
        if (await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/myprofile") != null)
        {
            await reloadService.ReloadPage();
            UriHelper.NavigateTo("/myprofile");
        }
    }
}