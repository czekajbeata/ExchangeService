@using ExchangeService.Shared.Resources;
@page "/addexchangegame"
@inject HttpClient Http

<h1>Add game for exchange</h1>
<input type="text" bind="@GameTitle" />

@if (gameWasSearched)
{
    @if (response != null && response.Length > 0)
    {
        <p>Select game from existing or add a new one:</p>
        <select bind="@SelectedId">
            <option selected>...</option>
            @foreach (var game in response)
            {
                <option value="@game.Id">@game.Name</option>
            }
        </select>
    }
    <button onclick=@(() => AddNewGame())>Add new game</button>

    @if (gameDetails != null)
    {
        <table>
            <tr>
                <td> Game title: </td>
                <td> <input type="text" bind="@gameDetails.Title " /></td>
            </tr>
            <tr>
                <td> Description: </td>
                <td> <input type="text" bind="@gameDetails.Description" /> </td>
            </tr>
            <tr>
                <td> Publisher: </td>
                <td> <input type="text" bind="@gameDetails.Publisher" /> </td>
            </tr>
            <tr>
                <td> Genre: </td>
                <td> <input type="text" bind="@gameDetails.GenreName" /> </td>
            </tr>
            <tr>
                <td> Player count: </td>
                <td> <input type="text" bind="@gameDetails.PlayerCount" /> </td>
            </tr>
            <tr>
                <td> Age required: </td>
                <td> <input type="number" bind="@gameDetails.MinAgeRequired" /> </td>
            </tr>
        </table>

        <button onclick=@(async () => await SaveGameDetails())>Save details</button>

        @if (newUserGame != null)
        {
            <table>
                <tr>
                    <td> State: </td>
                    <td> <input type="text" bind="@newUserGame.State " /></td>
                </tr>
                <tr>
                    <td> Is Complete: </td>
                    <td> <input type="checkbox" bind="@newUserGame.IsComplete" /> </td>
                </tr>
                <tr>
                    <td> Shipment: </td>
                    <td> <input type="text" bind="@newUserGame.Shipment" /> </td>
                </tr>
                <tr>
                    <td> Description: </td>
                    <td> <input type="text" bind="@newUserGame.UserGameDescription" /> </td>
                </tr>
            </table>

            <button onclick=@(async () => await AddUserGameToDB())>Add game for exchange</button>
        }

        @if (success)
        {
            <p>Game was added for exchange</p>
        }
    }

}





@functions {
DropDownItem[] response;
bool gameWasSearched = false;
bool gameDoesntExist = true;
GameDto gameDetails = null;
UserGameDto newUserGame = null;
bool success = false;
string gameID;

string gameTitle = null;
public string GameTitle
{
    get => gameTitle;
    set
    {
        gameTitle = value;
        if (!string.IsNullOrEmpty(gameTitle)) FillAutoComplete().ConfigureAwait(false);
        StateHasChanged();
    }
}

string selectedId = null;
public string SelectedId
{
    get => selectedId;
    set
    {
        selectedId = value;
        if (!string.IsNullOrEmpty(selectedId)) GetGameDetails().ConfigureAwait(false);
    }
}

private async Task FillAutoComplete()
{
    response = await Http.GetJsonAsync<DropDownItem[]>("http://localhost:5000/api/games/" + GameTitle);
    SelectedId = null;
    gameWasSearched = true;
    gameDetails = null;
    newUserGame = null;
    success = false;
    StateHasChanged();
}

private void AddNewGame()
{
    gameDetails = new GameDto();
    SelectedId = string.Empty;
    GameTitle = string.Empty;
    gameDoesntExist = true;
    newUserGame = null;
}

private async Task GetGameDetails()
{
    gameDetails = await Http.GetJsonAsync<GameDto>("http://localhost:5000/api/games/get/" + SelectedId);
    gameDoesntExist = false;
    GameTitle = string.Empty;
    newUserGame = null;
    gameID = gameDetails.GameId.ToString();
    StateHasChanged();
}

private async Task SaveGameDetails()
{
    if (gameDoesntExist)
        await AddGameToDB();
    else
        await UpdateGameInDB();

    newUserGame = new UserGameDto()
    {
        GameId = Int32.Parse(gameID)
    };
}

private async Task AddGameToDB()
{
    await Http.PostJsonAsync("http://localhost:5000/api/games/", gameDetails);
    var games = await Http.GetJsonAsync<DropDownItem[]>("http://localhost:5000/api/games/" + gameDetails.Title);
    gameID = games[0].Id.ToString();
}


private async Task UpdateGameInDB()
{
    await Http.PutJsonAsync("http://localhost:5000/api/games/", gameDetails);
}

private async Task AddUserGameToDB()
{
    await Http.PostJsonAsync("http://localhost:5000/api/users/games/", newUserGame);
    success = true;
}
}
