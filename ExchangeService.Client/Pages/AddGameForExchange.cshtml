@using ExchangeService.Shared.Resources;
@using ExchangeService.Shared.Enums;
@using ExchangeService.Client.Services;
@using System.Linq;
@page "/addexchangegame"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h1>Add game for exchange</h1>
<br />

<GamesListDetails OnSubmit="SaveDetails" gameDetails="Game" ItemChanged="@SetGameDtoCallback">
    <button type="submit" class="btn btn-primary" disabled="@(Game == null)">
        Save game details
    </button>
</GamesListDetails>


<br /><br />
@if (newUserGame != null)
{
    <div class="row" style="padding:4px">
        <label for="shipment" class="col-sm-6"> Shipment type: </label>
        <div class="col-sm-6">
            <select bind="@newUserGame.Shipment" class="form-control">
                @foreach (var shipmentType in Enum.GetValues(typeof(Shipment)))
                {
                    <option value="@shipmentType">@shipmentType</option>
                }
            </select>
        </div>
    </div>
    <div class="row" style="padding:4px">
        <label for="isComplete" class="col-sm-6"> Is your game complete: </label>
        <div class="col-sm-6">
            <input type="checkbox" class="form-control" id="isComplete" placeholder="false" bind="@newUserGame.IsComplete" />
        </div>
    </div>
    <div class="row" style="padding:4px">
        <label for="gameState" class="col-sm-6"> Game state: </label>
        <div class="col-sm-6">
            <select bind="@newUserGame.State" class="form-control">
                @foreach (var gameState in Enum.GetValues(typeof(GameState)))
                {
                    <option value="@gameState">@gameState</option>
                }
            </select>
        </div>
    </div>
    <div class="row" style="padding:4px">
        <label for="stateDescription" class="col-sm-6"> State description: </label>
        <div class="col-sm-6">
            <input type="text" class="form-control" id="stateDescription" placeholder="Description of game state" bind="@newUserGame.UserGameDescription" />
        </div>
    </div>
    <div class="row" style="padding:4px">
        <label for="gamePictures" class="col-sm-6"> Game pictures: </label>
        <div class="col-sm-6">
            <input type="text" class="form-control" id="pictureUrl" placeholder="Url for game pictures (comma separated)" bind="@pictureUrls" />
        </div>
    </div>

    @if (errorsUsergame.Count() > 0)
    {
        <br />
        <div class="alert alert-danger" role="alert">
            <br />
            @foreach (var error in errorsUsergame)
            {
                <p class="font-italic">@error</p>
            }
        </div>
    }

    <button type="button" class="btn btn-primary" onclick=@(async () => await AddUserGameToDB())>Add game for exchange</button>
}

@functions {

    public GameDto Game { get; set; } = null;
    GameDto gameDetails = null;
    UserGameDto newUserGame = null;
    public bool isValidUsergame = false;
    public List<string> errorsUsergame = new List<string>();
    public string pictureUrls;

    protected override void OnInit()
    {
        appState.TrySetAccessTokens();
        if (!appState.IsUserLoggedIn)
        {
            UriHelper.NavigateTo("/unauthorized");
        }
    }

    private async Task SaveDetails(UIEventArgs args)
    {
        await Task.Run(() =>
        {
            newUserGame = new UserGameDto()
            {
                GameId = Game.GameId
            };
        });
        StateHasChanged();
    }

    private void SetGameDtoCallback(GameDto game)
    {
        this.Game = game;
        StateHasChanged();
    }

    private async Task AddUserGameToDB()
    {
        errorsUsergame.Clear();
        ValidateInputsUsergame();
        if (isValidUsergame)
        {
            if (pictureUrls == null) pictureUrls = string.Empty;
            newUserGame.UserImages = pictureUrls.Contains(',') ? pictureUrls.Split(',') : new string[] { pictureUrls };
            var canAddGame = await Http.GetJsonAsync<bool>("http://localhost:5000/api/games/check/" + Game.GameId);
            if (canAddGame)
            {
                await Http.PostJsonAsync("http://localhost:5000/api/users/games/", newUserGame);
                UriHelper.NavigateTo("/gameexchangesuccess");
            }
            else
                UriHelper.NavigateTo("/addforexchangefail");
        }
    }

    private void ValidateInputsUsergame()
    {
        if (string.IsNullOrEmpty(newUserGame.UserGameDescription))
            errorsUsergame.Add("Please fill game state description.");

        isValidUsergame = errorsUsergame.Count() == 0;
        StateHasChanged();
    }
}
