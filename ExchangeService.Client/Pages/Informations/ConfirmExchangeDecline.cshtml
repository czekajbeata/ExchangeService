@using ExchangeService.Shared.Resources;
@using ExchangeService.Shared.Enums;
@using ExchangeService.Client.Services;
@page "/exchangedecline/{ExchangeId}"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

@if (Exchange == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <br />
        <div class="row">
            <h3>Do you want to abandon an exchange?</h3>
        </div>
        <br />
        <div class="row">
            <div class="col-sm-3" />
            <div class="col-sm-3">
                <button type="button" class="btn btn-secondary btn-block" onclick="@(() => Return())">Return</button>
            </div>
            <div class="col-sm-3">
                <button type="button" class="btn btn-danger btn-block" onclick="@(async () => await Abandon())">Remove</button>
            </div>
        </div>
    </div>    
   }

@functions{
    [Parameter]
    string ExchangeId { get; set; }
    ShortenedExchangeView Exchange { get; set; }

    protected override async Task OnInitAsync()
    {
        appState.TrySetAccessTokens();
        Exchange = await Http.GetJsonAsync<ShortenedExchangeView>("http://localhost:5000/api/users/shortendexchange/" + ExchangeId);

        var loggedUserId = await Http.GetJsonAsync<int>("http://localhost:5000/api/users/id");
        if ((Exchange.FirstUserId != loggedUserId && Exchange.SecondUserId != loggedUserId) ||
            (Exchange.State != ExchangeState.Waiting))
            UriHelper.NavigateTo("/exchangedeclinefail");
    }

    private async Task Abandon()
    {
        await Http.PutJsonAsync("http://localhost:5000/api/users/exchanges/decline", Exchange);
        UriHelper.NavigateTo("/exchangedeclinesuccess");
    }

    private void Return()
    {
        UriHelper.NavigateTo("/myexchanges");
    }
}