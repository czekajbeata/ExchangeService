@using ExchangeService.Shared.Resources;
@using ExchangeService.Shared.Enums;
@using ExchangeService.Client.Services;
@page "/exchangeaccpet/{ExchangeId}"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

@if (Exchange == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <br />
            @if (Exchange.Shipment == Shipment.Delivery)
            {
                <h3>Provide address for package delivery</h3>
                <br />
                <input class="form-control  input-lg" type="text" placeholder="Delivery details..." bind="@ContactDetails" />
            }
            else
            {
                <h3>Provide contact details to discuss the pickup</h3>
                <br />
                <input class="form-control" type="text" placeholder="Contact details..." bind="@ContactDetails" />
            }
        </div>
        <br />
        <div class="row">
            <div class="col-sm-1">  <input class="form-control" type="checkbox" bind="@isFinal" /> </div>
            <div class="col-sm-11"> <p class="font-italic">I am aware that accepting an exchange is final and I won't be able to change my decission later</p></div>
        </div>
        <br />
        <div class="row">
            @if (!string.IsNullOrEmpty(contactDetailsError))
            {
                <div class="col-sm-12">
                    <div class="alert alert-danger" role="alert">
                        <br />
                        <p class="font-italic">@contactDetailsError</p>
                    </div>
                </div>
                <br /><br />
            }
        </div>
        <div class="row">
            <div class="col-sm-3" />
            <div class="col-sm-3">
                <button type="button" class="btn btn-secondary btn-block" onclick=@(() => BackToExchagnes())>Back to exchanges</button>
            </div>
            <div class="col-sm-3">
                <button type="button" class="btn btn-success btn-block" onclick=@(() => Accept())>Accept exchange</button>
            </div>
        </div>
    </div>
}

@functions{
    [Parameter]
    string ExchangeId { get; set; }
    ExchangeDto Exchange { get; set; }
    string ContactDetails { get; set; }
    string contactDetailsError = "";
    bool isFinal = false;

    protected override async Task OnInitAsync()
    {
        appState.TrySetAccessTokens();
        Exchange = await Http.GetJsonAsync<ExchangeDto>("http://localhost:5000/api/users/exchange/" + ExchangeId);
    }

    private async Task Accept()
    {
        contactDetailsError = string.Empty;
        if (string.IsNullOrEmpty(ContactDetails))
        {
            contactDetailsError = "Please provide details for other user.";
        }
        if(!isFinal)
        {
            contactDetailsError += "\nPlease confirm that you agree with exchanges policy.";
        }
        if(!string.IsNullOrEmpty(ContactDetails) && isFinal)
        {
            Exchange.MyContactInfo = ContactDetails;
            await Http.PutJsonAsync("http://localhost:5000/api/users/exchanges/accept", Exchange);
            UriHelper.NavigateTo("/exchangeacceptsuccess");
        }
    }

    private void BackToExchagnes()
    {
        UriHelper.NavigateTo("/myexchanges");
    }

}
