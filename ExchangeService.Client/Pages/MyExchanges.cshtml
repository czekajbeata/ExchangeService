@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@page "/myexchanges"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState

@if (myExchanges == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (myExchanges.Count() > 0)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Other user</th>
                    <th scope="col">You're getting</th>
                    <th scope="col">You're giving</th>
                    <th scope="col">Shippment</th>
                    <th scope="col">Exchange state</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < myExchanges.Count(); i++)
                {
                    <tr>
                        <td>@otherUsers[i].Name @otherUsers[i].Surname</td>
                        <td>@otherUsersGames[i]</td>
                        <td>@myGames[i]</td>
                        <td>@myExchanges[i].Shipment</td>
                        <td>@myExchanges[i].State</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>You have no exchanges</p>
    }
}


@functions {
ExchangeDto[] myExchanges;
UserView[] otherUsers;
string[] otherUsersGames;
string[] myGames;

protected override async Task OnInitAsync()
{
    appState.TrySetAccessTokens();
    var exchanges = await Http.GetJsonAsync<IEnumerable<ExchangeDto>>("http://localhost:5000/api/users/myexchanges");
    myExchanges = exchanges.ToArray();
    await FillOtherUsers();
    await FillOtherUsersGames();
    await FillMyGames();
}

private async Task FillOtherUsers()
{
    int count = myExchanges.Count();
    otherUsers = new UserView[count];
    for (int i = 0; i < count; i++)
    {
        otherUsers[i] = await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/" + myExchanges[i].OtherUserId);
    }
}

private async Task FillOtherUsersGames()
{
    int count = myExchanges.Count();
    otherUsersGames = new string[count];
    for (int i = 0; i < count; i++)
    {
        var gameId = myExchanges[i].OtherUserGamesIds[0];
        var gameDto = await Http.GetJsonAsync<GameDto>("http://localhost:5000/api/games/get/" + gameId);
        otherUsersGames[i] = gameDto.Title;

        for (int j = 1; j < myExchanges[i].OtherUserGamesIds.Count(); j++)
        {
            gameId = myExchanges[i].OtherUserGamesIds[j];
            gameDto = await Http.GetJsonAsync<GameDto>("http://localhost:5000/api/games/get/" + gameId);
            otherUsersGames[i] += ", ";
            otherUsersGames[i] += gameDto.Title;
        }
    }
}

private async Task FillMyGames()
{
    int count = myExchanges.Count();
    myGames = new string[count];
    for (int i = 0; i < count; i++)
    {
        var gameId = myExchanges[i].MyGamesIds[0];
        var gameDto = await Http.GetJsonAsync<GameDto>("http://localhost:5000/api/games/get/" + gameId);
        myGames[i] = gameDto.Title;

        for (int j = 1; j < myExchanges[i].MyGamesIds.Count(); j++)
        {
            gameId = myExchanges[i].MyGamesIds[j];
            gameDto = await Http.GetJsonAsync<GameDto>("http://localhost:5000/api/games/get/" + gameId);
            myGames[i] += ", ";
            myGames[i] += gameDto.Title;
        }
    }
}
}
