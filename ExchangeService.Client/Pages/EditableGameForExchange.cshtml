@using ExchangeService.Shared.Resources
@using ExchangeService.Client.Services;
@page "/editableexchangegame/{UserGameId}"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h3>Edit game: @GameView.Title</h3>
<br />

<div class="container">
    <div class="row">
        <div class="col-sm-3">
            <ProfileDetails Profile="GameOwner"/>
        </div>
        <div class="col-sm-9">
            <GameDetails Game="GameView" />
            <ValidateUserGame OnSubmit="UpdateDetails" UserGame="UserGameView" Pictures="GamePictures">                
                <div class="row">
                    <div class="col-sm-4">
                        <a role="button" class="btn btn-secondary btn-block" href="/myprofile">Back to profile</a>
                    </div>
                    <div class="col-sm-4">
                        <button type="submit" class="btn btn-primary btn-block">Update details</button>
                    </div>
                </div>
            </ValidateUserGame>
        </div>
    </div>
</div>

@functions {
    [Parameter]
    string UserGameId { get; set; }
    GameView GameView { get; set; } = new GameView();
    UserGameDto UserGameView { get; set; } = new UserGameDto();
    List<string> GamePictures { get; set; } = new List<string>();
    UserView GameOwner { get; set; } = new UserView();
    DropDownItem[] genres;
    bool contactDetailsVisible = false;
    string contactDetailsButton = "Show contact details";

    protected override async Task OnInitAsync()
    {
        appState.TrySetAccessTokens();
        if (!appState.IsUserLoggedIn)
        {
            UriHelper.NavigateTo("/unauthorized");
        }
        UserGameView = await Http.GetJsonAsync<UserGameDto>("http://localhost:5000/api/users/game/" + UserGameId);
        GameView = await Http.GetJsonAsync<GameView>("http://localhost:5000/api/games/getview/" + UserGameView.GameId);
        GamePictures = UserGameView.UserImages.ToList();
        genres = await Http.GetJsonAsync<DropDownItem[]>("http://localhost:5000/api/genres");
        GameOwner = await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/myprofile");
        if (GameOwner.UserId != UserGameView.UserId)
        {
            UriHelper.NavigateTo("/gameeditfail");
        }
    }

    private void ToogleContactDetails()
    {
        if (contactDetailsVisible)
        {
            contactDetailsVisible = false;
            contactDetailsButton = "Show contact details";
        }
        else
        {
            contactDetailsVisible = true;
            contactDetailsButton = "Hide contact details";
        }
    }

    private async Task UpdateDetails(UIEventArgs args)
    {
        UserGameDto updatedUserGame = new UserGameDto
        {
            GameId = UserGameView.GameId,
            State = UserGameView.State,
            IsComplete = UserGameView.IsComplete,
            Shipment = UserGameView.Shipment,
            UserGameDescription = UserGameView.UserGameDescription,
            UserImages = GamePictures.ToArray()
        };
        await Http.PutJsonAsync("http://localhost:5000/api/users/games/", updatedUserGame);
        UriHelper.NavigateTo("/gameupdatedsuccess");
    }
}
