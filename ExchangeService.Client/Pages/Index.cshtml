@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@page "/"
@page "/{Query}"
@inject HttpClient Http
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h1>Games catalogue</h1>
<br />
@if (games != null && games.Length > 0)
{
    <div class="container">
        <div class="row">
            <div class="col-sm-2">
                <div class="alert alert-secondary" role="alert">
                    <div class="row">
                        <p>Genres: </p>
                    </div>
                    @foreach (var genre in genres)
                    {
                        <div class="row">
                            <input type="checkbox" checked="@(selectedGenres.Contains(genre))" onchange="@(() => ToogleGenreSelect(genre))" />@genre
                        </div>
                    }
                    <br />
                    <div class="row">
                        <p>Player counts: </p>
                    </div>
                    @foreach (var player in playersCounts)
                    {
                        <div class="row">
                            <input type="checkbox" checked="@(selectedPlayerCounts.Contains(player))" onchange="@(() => TooglePlayerCountSelect(player))" />@player
                        </div>
                    }
                    <br />
                    <div class="row">
                        <p>Game time to: </p>
                    </div>
                    @foreach (var gameTime in gameTimes)
                    {
                        <div class="row">
                            <input type="radio" checked="@(maxGameTime == gameTime)" onclick="@(() => maxGameTime = maxGameTime == gameTime ? "" : gameTime)" />@gameTime min
                        </div>
                    }
                    <br />
                    <div class="row">
                        <p>Min age from: </p>
                    </div>
                    @foreach (var age in minAges)
                    {
                        <div class="row">
                            <input type="radio" checked="@(minAgeRequired == age)" onclick="@(() => minAgeRequired = minAgeRequired == age ? "" : age)" />@age
                        </div>
                    }
                    <br/>
                    <button class="btn btn-outline-primary btn-block" onclick="@(() => FilterGames())">Filter games</button>
                    <button class="btn btn-outline-primary btn-block" onclick="@(() => ResetFilters())">Reset filters</button>
                </div>
            </div>
            <div class="col-sm-10">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width: 30%">Game</th>
                            <th style="width: 10%">Title</th>
                            <th style="width: 20%">Genre</th>
                            <th style="width: 30%">Description</th>
                            <th style="width: 10%"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var gameRow in filteredGames)
                        {
                            <tr>
                                <td>
                                    <div class="row">
                                        <div class="col-sm-5">
                                            <img src="@gameRow.ImageUrl" width="100" height="100" />
                                        </div>
                                        <div class="col-sm-7">
                                            <div class="row">
                                                <div class="col-sm-2">
                                                    <i class="fas fa-users"></i>
                                                </div>
                                                <div class="col-sm-9">
                                                    @gameRow.PlayerCount
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-sm-2">
                                                    <i class="fas fa-clock"></i>
                                                </div>
                                                <div class="col-sm-9">
                                                    @gameRow.GameTimeInMin min
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-sm-2">
                                                    <i class="fas fa-user-friends"></i>
                                                </div>
                                                <div class="col-sm-9">
                                                    @gameRow.MinAgeRequired +
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td> <p class="font-weight-bold font-italic"> @gameRow.Title </p></td>
                                <td> @gameRow.GenreName </td>
                                <td> @gameRow.Description </td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-block" onclick="@(() => GetDetails(gameRow))">Details</button>
                                    <button type="button" class="btn btn-primary btn-block" onclick="@(() => GameOffers(gameRow))">Game offers</button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<div class="container">
    <div class="alert alert-secondary mt-4" role="alert">
        <div class="row">
            <span>   </span>
            <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
            <strong>Problems? </strong>
            <span class="text-nowrap">
                Contact us at
                <text class="font-italic">helper@exchanges.com.</text>
            </span>
        </div>
    </div>
</div>


@functions
{
    GameView[] games;
    GameView[] filteredGames;
    string query = null;
    List<string> selectedGenres = new List<string>();
    string[] genres = new string[] { };
    List<string> selectedPlayerCounts = new List<string>();
    string[] playersCounts = new string[] { };
    string maxGameTime = "";
    string[] gameTimes = new string[] { };
    string minAgeRequired = "";
    string[] minAges = new string[] { };

    [Parameter]
    private string Query
    {
        get => query;
        set
        {
            query = value;
            if (!string.IsNullOrEmpty(query)) FillGames().ConfigureAwait(false);
            StateHasChanged();
        }
    }

    protected override async Task OnInitAsync()
    {
        await FillGames();
    }

    private async Task FillGames()
    {
        appState.TrySetAccessTokens();
        var gamesByQuery = await Http.GetJsonAsync<IEnumerable<GameView>>("http://localhost:5000/api/" + Query);
        games = gamesByQuery.ToArray();
        foreach (var game in games)
        {
            if (game.Description.Length > 110)
            {
                game.Description = game.Description.Substring(0, 84) + "...";
            }
        }
        filteredGames = games;
        genres = games.Select(g => g.GenreName).Distinct().ToArray();
        playersCounts = games.Select(g => g.PlayerCount).Distinct().ToArray();
        gameTimes = games.Select(g => g.GameTimeInMin).Distinct().ToArray();
        minAges = games.Select(g => g.MinAgeRequired).Distinct().ToArray();
        StateHasChanged();
    }

    private void GetDetails(GameView row)
    {
        UriHelper.NavigateTo($"/game/{row.GameId}");
    }

    private void GameOffers(GameView row)
    {
        UriHelper.NavigateTo($"/games/{row.GameId}");
    }

    private void ToogleGenreSelect(string genre)
    {
        if (selectedGenres.Contains(genre))
            selectedGenres.Remove(genre);
        else
            selectedGenres.Add(genre);
        StateHasChanged();
    }

    private void TooglePlayerCountSelect(string playerCount)
    {
        if (selectedPlayerCounts.Contains(playerCount))
            selectedPlayerCounts.Remove(playerCount);
        else
            selectedPlayerCounts.Add(playerCount);
        StateHasChanged();
    }

    private void FilterGames()
    {
        var filtered = games;
        if(selectedGenres.Count > 0)
        {
            filtered = filtered.Where(g => selectedGenres.Contains(g.GenreName)).ToArray();
        }
        if (selectedPlayerCounts.Count > 0)
        {
            filtered = filtered.Where(g => selectedPlayerCounts.Contains(g.PlayerCount)).ToArray();
        }
        if(!string.IsNullOrEmpty(minAgeRequired))
        {
            filtered = filtered.Where(g => Int32.Parse(g.MinAgeRequired) >= Int32.Parse(minAgeRequired)).ToArray();
        }
        if (!string.IsNullOrEmpty(maxGameTime))
        {
            filtered = filtered.Where(g => Int32.Parse(g.GameTimeInMin) <= Int32.Parse(maxGameTime)).ToArray();
        }
        filteredGames = filtered;
        StateHasChanged();
    }

    private void ResetFilters()
    {
        filteredGames = games;
        selectedGenres.Clear();
        selectedPlayerCounts.Clear();
        minAgeRequired = "";
        maxGameTime = "";
    }
}