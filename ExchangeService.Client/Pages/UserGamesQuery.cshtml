@using ExchangeService.Shared.Resources;
@using ExchangeService.Shared.Enums;
@using ExchangeService.Client.Services;
@page "/games/{GameId}"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

@if (userGames == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Users games for @userGames[0].Title</h1>
    <br />
    <div class="container">
        <div class="row">
            <div class="col-sm-2">
                <div class="card">
                    <h5 class="card-header">Filters</h5>
                    <div class="card-body" style="padding:10px">
                        <p class="card-text font-weight-bold">Game states: </p>
                        @foreach (var state in gameStates)
                        {
                            <div>
                                <input type="checkbox" checked="@(selectedStates.Contains(state))" onchange="@(() => ToogleStateSelect(state))" />@state
                            </div>
                        }
                        <br />
                        <p class="card-text font-weight-bold">Shipment type: </p>
                        @foreach (var shipment in shimpments)
                        {
                            <div>
                                <input type="radio" checked="@(gameShipment == shipment)" onclick="@(() => gameShipment = gameShipment == shipment ? "" : shipment)" />@shipment
                            </div>
                        }
                        <br />
                        <p class="card-text font-weight-bold">Game completeness: </p>
                        @foreach (var complete in completeness)
                        {
                            <div>
                                <input type="radio" checked="@(isComplete == complete)" onclick="@(() => isComplete = isComplete == complete ? "" : complete)" />@complete
                            </div>
                        }
                        <br />
                        <button class="btn btn-outline-primary btn-block" onclick="@(() => FilterGames())">Filter games</button>
                        <button class="btn btn-outline-primary btn-block" onclick="@(() => ResetFilters())">Reset filters</button>
                    </div>
                </div>
            </div>
            <div class="col-sm-10">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width: 23%">Game</th>
                            <th style="width: 11%">State</th>
                            <th style="width: 13%">Is complete</th>
                            <th style="width: 13%">Shipment</th>
                            <th style="width: 25%">User</th>
                            <th style="width: 10%"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var gameRow in filteredUserGames)
                        {
                            <tr>
                                <td>
                                    <div class="row">
                                        <div class="col-sm-5">
                                            <img src="@gameRow.ImageUrl" width="80" height="80" />
                                        </div>
                                        <div class="col-sm-7">
                                            <div class="row">
                                                <div class="col-sm-3">
                                                    <i class="fas fa-users"></i>
                                                </div>
                                                <div class="col-sm-9">
                                                    @gameRow.PlayerCount
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-sm-3">
                                                    <i class="fas fa-clock"></i>
                                                </div>
                                                <div class="col-sm-9">
                                                    @gameRow.GameTimeInMin min
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-sm-3">
                                                    <i class="fas fa-user-friends"></i>
                                                </div>
                                                <div class="col-sm-9">
                                                    @gameRow.MinAgeRequired +
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>@gameRow.State</td>
                                <td>@gameRow.IsComplete</td>
                                <td>@gameRow.Shipment</td>
                                <td>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <img src="@gameRow.UserImageUrl" width="80" height="80" />
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="row">
                                                @gameRow.Name @gameRow.Surname
                                            </div>
                                            <div class="row">
                                                <i class="fas fa-map-marker-alt" /> @gameRow.Location
                                            </div>
                                            <div class="row">
                                                Avg mark: @gameRow.AvgMark
                                            </div>
                                        </div>
                                    </div>

                                </td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-block" onclick="@(() => GetDetails(gameRow))">Details</button>
                                    <button type="button" class="btn btn-primary btn-block" onclick="@(() => OfferDeal(gameRow))">Offer a deal</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@functions {
[Parameter]
string GameId { get; set; }
GameAndUserView[] userGames;
GameAndUserView[] filteredUserGames;

string[] gameStates = new string[] { };
string[] shimpments = new string[] { };
string[] completeness = new string[] { };

List<string> selectedStates = new List<string>();
string gameShipment;
string isComplete;

protected override async Task OnInitAsync()
{
    appState.TrySetAccessTokens();
    var usergames = await Http.GetJsonAsync<IEnumerable<GameAndUserView>>("http://localhost:5000/api/usergames/" + GameId);
    if (appState.IsUserLoggedIn)
    {
        var loggedUserId = await Http.GetJsonAsync<int>("http://localhost:5000/api/users/id");
        usergames = usergames.Where(g => g.UserId != loggedUserId);
    }
    userGames = usergames.ToArray();
    if (userGames == null || !(userGames.Count() > 0))
    {
        UriHelper.NavigateTo($"/usergamesfail");
    }
    filteredUserGames = userGames;
    gameStates = usergames.Select(u => u.State.ToString()).ToArray();
    shimpments = usergames.Select(u => u.Shipment.ToString()).ToArray();
    var shipmentList = shimpments.ToList();
    if (shipmentList.Contains(Shipment.Delivery.ToString()) && shipmentList.Contains(Shipment.Pickup.ToString()) && !shipmentList.Contains(Shipment.Any.ToString()))
    {
        shipmentList.Add("Any");
        shimpments = shipmentList.ToArray();
    }
    completeness = usergames.Select(u => u.IsComplete.ToString()).ToArray();
}

private void GetDetails(GameAndUserView row)
{
    UriHelper.NavigateTo($"/exchangegame/{row.UserGameId}");
}

private void OfferDeal(GameAndUserView row)
{
    UriHelper.NavigateTo($"/offerdeal/{row.UserId}");
}

private void ToogleStateSelect(string state)
{
    if (selectedStates.Contains(state))
        selectedStates.Remove(state);
    else
        selectedStates.Add(state);
    StateHasChanged();
}

private void FilterGames()
{
    var filtered = userGames;
    if (selectedStates.Count > 0)
    {
        filtered = filtered.Where(g => selectedStates.Contains(g.State.ToString())).ToArray();
    }
    if (!string.IsNullOrEmpty(isComplete))
    {
        filtered = filtered.Where(g => g.IsComplete.ToString() == isComplete).ToArray();
    }
    if (!string.IsNullOrEmpty(gameShipment) && gameShipment != "Any")
    {
        filtered = filtered.Where(g => g.Shipment.ToString() == gameShipment).ToArray();
    }
    filteredUserGames = filtered;
    StateHasChanged();
}

private void ResetFilters()
{
    filteredUserGames = userGames;
    selectedStates.Clear();
    isComplete = string.Empty;
    gameShipment = string.Empty;
    StateHasChanged();
}
}
