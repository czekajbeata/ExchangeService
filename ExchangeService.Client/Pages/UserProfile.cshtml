@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@page "/profile/{UserId}"
@inject HttpClient Http
@inject TokenService tokenService
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h1>User profile</h1>
<br />

@if (profileOwner == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group row">

        <div class="col-sm-3">
            <div class="row justify-content-center">
                <img src="@profileOwner.ImageUrl" width="150" height="150">
            </div>
            <div class="row justify-content-center">
                <p class="font-weight-bold">@profileOwner.Name @profileOwner.Surname</p>
            </div>
            <div class="form-group row">
                <div class="col-sm-2">
                    <i class="fas fa-map-marker-alt" style="font-size: 18px"></i>
                </div>
                <div class="col-sm-10">
                    <p class="font-weight-normal">@profileOwner.PickUpLocation</p>
                </div>
            </div>

            @if (profileOwner.Pickup && !profileOwner.Delivery)
            {
                <p class="font-italic">Pickup only</p>
            }
            else if (profileOwner.Delivery && !profileOwner.Pickup)
            {
                <p class="font-italic">Delivery only</p>
            }

            <div class="form-group row">
                <div class="col-sm-9">
                    <p class="font-weight-normal">Exchanges made:</p>
                </div>
                <div class="col-sm-3">
                    @profileOwner.ExchangesCount
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-9">
                    <p class="font-weight-normal">Reviews:</p>
                </div>
                <div class="col-sm-3">
                    @profileOwner.ReviewsCount
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-9">
                    <p class="font-weight-normal">Average mark:</p>
                </div>
                <div class="col-sm-3">
                    @profileOwner.AvgMark
                </div>
            </div>

            <button type="button" class="btn btn-primary btn-block" onclick=@(() => ToogleContactDetails())>@contactDetailsButton</button>
            @if (contactDetailsVisible)
            {
                <br/>
                <div class="form-group row">
                    <div class="col-sm-2">
                        <span class="fas fa-phone" style="font-size: 24px"></span>
                    </div>
                    <div class="col-sm-10">
                        <p class="font-weight-normal">@profileOwner.PhoneNumber</p>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        <span class="fas fa-envelope" style="font-size: 24px"></span>
                    </div>
                    <div class="col-sm-10">
                        <p class="font-weight-normal">@profileOwner.ContactEmail</p>
                    </div>
                </div>
            }
            <button type="button" class="btn btn-primary btn-block" onclick=@(() => OfferDeal())>Offer a deal</button>
        </div>
        <div class="col-sm-9">

            <div class="form-group row">
                <div class="col-sm-5">
                    <div class="alert alert-primary" role="alert">
                        Games for exchange
                    </div>
                </div>
            </div>
            <div class="form-group row">
                @for (int i = 0; i < userGames.Count(); i++)
                {
                    <div class="col-sm-2">
                        <div><img src="@userGames[i].ImageUrl" width="100" height="100" /></div>
                        <div>@userGames[i].Title</div>
                    </div>
                }
            </div>
            <br />
            <br />

            <div class="form-group row">
                <div class="col-sm-5">
                    <div class="alert alert-primary" role="alert">
                        Games searches
                    </div>
                </div>
            </div>
            <div class="form-group row">
                @for (int i = 0; i < userSearchGames.Count(); i++)
                {
                    <div class="col-sm-2">
                        <div><img src="@userSearchGames[i].ImageUrl" width="100" height="100" /></div>
                        <div>@userSearchGames[i].Title</div>
                    </div>
                }
            </div>
            <br />
            <br />

            <div class="form-group row">
                <div class="col-sm-5">
                    <div class="alert alert-primary" role="alert">
                        Reviews
                    </div>
                </div>
            </div>
            @if (comments.Count() > 0)
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width: 20%">Username</th>
                            <th style="width: 20%">Comment date</th>
                            <th style="width: 60%">Content</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < comments.Count(); i++)
                        {
                            <tr>
                                <td>
                                    <div class="row justify-content-center">
                                        @comentators[i].Name @comentators[i].Surname
                                    </div>
                                    <div class="row justify-content-center">
                                        <img src="@comentators[i].ImageUrl" width="100" height="100" />
                                    </div>
                                </td>
                                <td>@comments[i].CommentDate.ToShortDateString()</td>
                                <td>
                                    <div class="form-group row">
                                        Mark: @comments[i].Mark
                                    </div>
                                    <div class="form-group row">
                                        @comments[i].Text
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="form-group row">
                    <p class="font-italic">This user has no reviews.</p>
                </div>
            }
        </div>
    </div>

}


@functions {
    [Parameter]
    string UserId { get; set; }

    UserView profileOwner;
    CommentDto[] comments = new CommentDto[] { };
    List<UserView> comentators = new List<UserView>() { };
    UserGameView[] userGames = new UserGameView[] { };
    UserSearchGameView[] userSearchGames = new UserSearchGameView[] { };
    bool contactDetailsVisible = false;
    string contactDetailsButton = "Show contact details";


    protected override async Task OnInitAsync()
    {
        var token = await tokenService.GetAccessToken();
        Http.DefaultRequestHeaders.Add("Authorization", String.Format("Bearer {0} ", token));

        int profileOwnersId = Int32.Parse(UserId);
        profileOwner = await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/" + profileOwnersId);

        //var myProfile = await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/myprofile");
        //if (myProfile.UserId == profileOwner.UserId)
        //{
        //    UriHelper.NavigateTo("/myprofile");
        //}

        var result = await Http.GetJsonAsync<IEnumerable<CommentDto>>("http://localhost:5000/api/users/comments/" + profileOwnersId);
        if (result.Count() > 0) await FillComents(result.ToArray());

        var toExchange = await Http.GetJsonAsync<IEnumerable<UserGameView>>("http://localhost:5000/api/users/games/" + profileOwnersId);
        userGames = toExchange.ToArray();
        var forSearch = await Http.GetJsonAsync<IEnumerable<UserSearchGameView>>("http://localhost:5000/api/users/searches/" + profileOwnersId);
        userSearchGames = forSearch.ToArray();
    }

    private async Task FillComents(CommentDto[] dbComments)
    {
        comments = dbComments;
        foreach (var comment in comments)
        {
            comentators.Add(await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/" + comment.LeavingUserId));
        }
    }

    private void ToogleContactDetails()
    {
        if (contactDetailsVisible)
        {
            contactDetailsVisible = false;
            contactDetailsButton = "Show contact details";
        }
        else
        {
            contactDetailsVisible = true;
            contactDetailsButton = "Hide contact details";
        }
    }

    private void OfferDeal()
    {
        UriHelper.NavigateTo($"/offerdeal/{profileOwner.UserId}");
    }

}
