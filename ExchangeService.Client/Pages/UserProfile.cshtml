@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@page "/profile/{UserId}"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper


@if (ProfileOwner == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <br />
    <h1>@ProfileOwner.Name's profile</h1>
    <br />
    <div class="container">
        <div class="row" style="padding:4px">
            <div class="col-sm-3">
                <ProfileDetails Profile="ProfileOwner">
                    <button type="button" class="btn btn-primary btn-block" onclick=@(() => ToogleContactDetails())>@contactDetailsButton</button>
                    @if (contactDetailsVisible)
                    {
                        <br />
                        <div class="row" style="padding:4px">
                            <div class="col-sm-2">
                                <span class="fas fa-phone" style="font-size: 24px"></span>
                            </div>
                            <div class="col-sm-10">
                                <p class="font-weight-normal">@ProfileOwner.PhoneNumber</p>
                            </div>
                        </div>
                        <div class="row" style="padding:4px">
                            <div class="col-sm-2">
                                <span class="fas fa-envelope" style="font-size: 24px"></span>
                            </div>
                            <div class="col-sm-10">
                                <p class="font-weight-normal">@ProfileOwner.ContactEmail</p>
                            </div>
                        </div>
                    }
                    <button type="button" class="btn btn-primary btn-block" onclick=@(() => OfferDeal())>Offer a deal</button>
                </ProfileDetails>
            </div>
            <div class="col-sm-9">
                <div class="row" style="padding:4px">
                    <div class="col-sm-12">
                        <div class="alert alert-primary" role="alert">
                            Games for exchange
                        </div>
                    </div>
                </div>
                <div class="row" style="padding:4px">
                    @for (int i = 0; i < userGames.Count(); i++)
                    {
                        <div class="col-sm-2">
                            <div><img src="@userGames[i].ImageUrl" style="max-width:100px; max-height:100px"/></div>
                            <div><a href="/exchangegame/@userGames[i].UserGameId">@userGames[i].Title</a></div>
                        </div>
                    }
                </div>
                <br />
                <br />

                <div class="row" style="padding:4px">
                    <div class="col-sm-12">
                        <div class="alert alert-primary" role="alert">
                            Games searches
                        </div>
                    </div>
                </div>
                <div class="row" style="padding:4px">
                    @for (int i = 0; i < userSearchGames.Count(); i++)
                    {
                        <div class="col-sm-2">
                            <div><img src="@userSearchGames[i].ImageUrl" style="max-width:100px; max-height:100px"/></div>
                            <div><a href="/game/@userSearchGames[i].GameId">@userSearchGames[i].Title</a></div>
                        </div>
                    }
                </div>
                <br />
                <br />
                <div class="row" style="padding:4px">
                    <div class="col-sm-12">
                        <div class="alert alert-primary" role="alert">
                            Reviews
                        </div>
                    </div>
                </div>
                @if (comments.Count() > 0 || comments.SingleOrDefault(c => c.IsVisible) != null)
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th style="width: 20%">Username</th>
                                <th style="width: 20%">Comment date</th>
                                <th style="width: 60%">Content</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < comments.Count(); i++)
                            {
                                <tr>
                                    <td>
                                        <div class="row justify-content-center">
                                            @comentators[i].Name @comentators[i].Surname
                                        </div>
                                        <div class="row justify-content-center">
                                            <img src="@comentators[i].ImageUrl" style="max-width:100px; max-height:100px"/>
                                        </div>
                                    </td>
                                    <td>@comments[i].CommentDate.ToShortDateString()</td>
                                    <td>
                                        <div class="row" style="padding:4px">
                                            Mark: @comments[i].Mark
                                        </div>
                                        <div class="row" style="padding:4px">
                                            @comments[i].Text
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="row" style="padding:4px">
                        <p class="font-italic">This user has no reviews.</p>
                    </div>
                }
            </div>
        </div>
    </div>
}


@functions {
    [Parameter]
    string UserId { get; set; }

    UserView ProfileOwner { get; set; } = new UserView();
    CommentDto[] comments = new CommentDto[] { };
    List<UserView> comentators = new List<UserView>() { };
    UserGameView[] userGames = new UserGameView[] { };
    UserSearchGameView[] userSearchGames = new UserSearchGameView[] { };
    bool contactDetailsVisible = false;
    string contactDetailsButton = "Show contact details";

    protected override async Task OnInitAsync()
    {
        appState.TrySetAccessTokens();
        int profileOwnersId = Int32.Parse(UserId);
        ProfileOwner = await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/" + profileOwnersId);
        if (appState.IsUserLoggedIn)
        {
            var myProfile = await appState.GetMyProfile();
            if (myProfile.UserId == ProfileOwner.UserId)
            {
                UriHelper.NavigateTo("/myprofile");
            }
        }

        var result = await Http.GetJsonAsync<IEnumerable<CommentDto>>("http://localhost:5000/api/users/comments/" + profileOwnersId);
        if (result.Count() > 0) await FillComents(result);

        var toExchange = await Http.GetJsonAsync<IEnumerable<UserGameView>>("http://localhost:5000/api/users/games/" + profileOwnersId);
        userGames = toExchange.ToArray();
        var forSearch = await Http.GetJsonAsync<IEnumerable<UserSearchGameView>>("http://localhost:5000/api/users/searches/" + profileOwnersId);
        userSearchGames = forSearch.ToArray();
    }

    private async Task FillComents(IEnumerable<CommentDto> dbComments)
    {
        var commentList = dbComments.ToList();
        commentList.Reverse();
        comments = commentList.ToArray();
        foreach (var comment in comments)
        {
            comentators.Add(await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/" + comment.LeavingUserId));
        }
    }

    private void OfferDeal()
    {
        UriHelper.NavigateTo($"/offerdeal/{ProfileOwner.UserId}");
    }

    private void ToogleContactDetails()
    {
        if (contactDetailsVisible)
        {
            contactDetailsVisible = false;
            contactDetailsButton = "Show contact details";
        }
        else
        {
            contactDetailsVisible = true;
            contactDetailsButton = "Hide contact details";
        }
    }
}
