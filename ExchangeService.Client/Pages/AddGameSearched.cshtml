@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@page "/addsearchgame"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h1>Add game search</h1>
<br />

<div class="row" style="padding:4px">
    <label for="gameTitle" class="col-sm-6">Game title:</label>
    <div class="col-sm-6">
        <input type="text" class="form-control" id="gameTitle" placeholder="Title" bind="@GameTitle" />
    </div>
</div>

@if (gameWasSearched)
{
    @if (response != null && response.Length > 0)
    {
        <div class="row" style="padding:4px">
            <label for="gameId" class="col-sm-6">Select game from existing or add a new one:</label>
            <div class="col-sm-3">
                <select bind="@SelectedId" class="form-control">
                    <option selected>Choose...</option>
                    @foreach (var game in response)
                    {
                        <option value="@game.Id">@game.Name</option>
                    }
                </select>
            </div>
            <div class="col-sm-3">
                <button type="button" class="btn btn-light btn-block" onclick=@(() => AddNewGame())>Add new game</button>
            </div>
        </div>
    }
    else
    {
        <div class="row" style="padding:4px">
            <label for="gameId" class="col-sm-6">Game with provided title wasn't found. </label>
            <div class="col-sm-3">
                <button type="button" class="btn btn-light btn-block" onclick=@(() => AddNewGame())>Add new game</button>
            </div>
        </div>
    }


    @if (gameDetails != null)
    {
        <div class="row" style="padding:4px">
            <label for="gameTitle" class="col-sm-6">Game title: </label>
            <div class="col-sm-6">
                <input type="text" class="form-control" id="gameTitle" placeholder="Title" bind="@gameDetails.Title" />
            </div>
        </div>
        <div class="row" style="padding:4px">
            <label for="description" class="col-sm-6">Description: </label>
            <div class="col-sm-6">
                <input type="text" class="form-control" id="description" placeholder="Description" bind="@gameDetails.Description" />
            </div>
        </div>
        <div class="row" style="padding:4px">
            <label for="publisher" class="col-sm-6">Publisher: </label>
            <div class="col-sm-6">
                <input type="text" class="form-control" id="publisher" placeholder="Publisher" bind="@gameDetails.Publisher" />
            </div>
        </div>
        <div class="row" style="padding:4px">
            <label for="genre" class="col-sm-6">Genre: </label>
            <div class="col-sm-6">
                <input type="text" class="form-control" id="genre" placeholder="Genre" bind="@gameDetails.GenreName" />
            </div>
        </div>
        <div class="row" style="padding:4px">
            <label for="playerCount" class="col-sm-6">Player count: </label>
            <div class="col-sm-6">
                <input type="text" class="form-control" id="playerCount" placeholder="Min-max" bind="@gameDetails.PlayerCount" />
            </div>
        </div>
        <div class="row" style="padding:4px">
            <label for="ageRequired" class="col-sm-6"> Age required: </label>
            <div class="col-sm-6">
                <input type="number" class="form-control" id="ageRequired" placeholder="Age required" bind="@gameDetails.MinAgeRequired" />
            </div>
        </div>
        <div class="row" style="padding:4px">
            <label for="gameTime" class="col-sm-6"> Game time (in minutes): </label>
            <div class="col-sm-6">
                <input type="number" class="form-control" id="gameTime" placeholder="Game time" bind="@gameDetails.GameTimeInMin" />
            </div>
        </div>

        <button type="button" class="btn btn-primary" onclick=@(async () => await AddToSearched())>Add game search</button>
    }
}


@functions {
    DropDownItem[] response;
    bool gameWasSearched = false;
    bool gameDoesntExist = true;
    GameDto gameDetails = null;
    string gameID;

    string gameTitle = null;
    public string GameTitle
    {
        get => gameTitle;
        set
        {
            gameTitle = value;
            if (!string.IsNullOrEmpty(gameTitle)) FillAutoComplete().ConfigureAwait(false);
            StateHasChanged();
        }
    }

    string selectedId = null;
    public string SelectedId
    {
        get => selectedId;
        set
        {
            selectedId = value;
            if (!string.IsNullOrEmpty(selectedId)) GetGameDetails().ConfigureAwait(false);
        }
    }

    protected override void OnInit()
    {
        appState.TrySetAccessTokens();
        if (!appState.IsUserLoggedIn)
        {
            UriHelper.NavigateTo("/unauthorized");
        }
    }


    private async Task FillAutoComplete()
    {
        response = await Http.GetJsonAsync<DropDownItem[]>("http://localhost:5000/api/games/" + GameTitle);
        SelectedId = null;
        gameWasSearched = true;
        gameDetails = null;
        StateHasChanged();
    }

    private void AddNewGame()
    {
        gameDetails = new GameDto();
        SelectedId = string.Empty;
        GameTitle = string.Empty;
        gameDoesntExist = true;
    }

    private async Task GetGameDetails()
    {
        gameDetails = await Http.GetJsonAsync<GameDto>("http://localhost:5000/api/games/get/" + SelectedId);
        gameDoesntExist = false;
        GameTitle = string.Empty;
        gameID = gameDetails.GameId.ToString();
        StateHasChanged();
    }

    private async Task AddToSearched()
    {
        if (gameDoesntExist)
            await AddGameToDB();
        else
            await UpdateGameInDB();
        await AddSearch();
    }

    private async Task AddGameToDB()
    {
        await Http.PostJsonAsync("http://localhost:5000/api/games/", gameDetails);
        var games = await Http.GetJsonAsync<DropDownItem[]>("http://localhost:5000/api/games/" + gameDetails.Title);
        gameID = games[0].Id.ToString();
    }

    private async Task UpdateGameInDB()
    {
        await Http.PutJsonAsync("http://localhost:5000/api/games/", gameDetails);
    }

    private async Task AddSearch()
    {
        UserSearchGameDto newUserSearch = new UserSearchGameDto()
        {
            GameId = Int32.Parse(gameID)
        };
        await Http.PostJsonAsync("http://localhost:5000/api/users/searches/", newUserSearch);
        UriHelper.NavigateTo("/gamesearchsuccess");
    }

}
