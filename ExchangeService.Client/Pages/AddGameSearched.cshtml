@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@using System.Linq;
@page "/addsearchgame"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h1>Add game search</h1>
<br />

<GamesListDetails OnSubmit="AddToSearched" gameDetails="Game" ItemChanged="@SetGameDtoCallback">
    <button type="submit" class="btn btn-primary" disabled="@(Game == null)">
        Add game search
    </button>
</GamesListDetails>


@functions {

    public GameDto Game { get; set; } = null;

    protected override void OnInit()
    {
        appState.TrySetAccessTokens();
        if (!appState.IsUserLoggedIn)
        {
            UriHelper.NavigateTo("/unauthorized");
        }
    }

    private void SetGameDtoCallback(GameDto game)
    {
        this.Game = game;
        StateHasChanged();
    }

    private async Task AddToSearched(UIEventArgs args)
    {
        Console.WriteLine("in add search, " + Game.Title);
        Console.WriteLine("in add search, id: " + Game.GameId);
        var canAddGame = await Http.GetJsonAsync<bool>("http://localhost:5000/api/searches/check/" + Game.GameId);
        if (canAddGame)
            await AddSearch();
        else
            UriHelper.NavigateTo("/addsearchfail");
    }

    private async Task AddSearch()
    {
        Console.WriteLine("adding search");
        UserSearchGameDto newUserSearch = new UserSearchGameDto()
        {
            GameId = Game.GameId
        };
        await Http.PostJsonAsync("http://localhost:5000/api/users/searches/", newUserSearch);
        UriHelper.NavigateTo("/gamesearchsuccess");
    }

}
