@using ExchangeService.Shared.Resources;
@using ExchangeService.Client.Services;
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@page "/login"
@inject HttpClient Http
@inject TokenService tokenService
@inject ReloadService reloadService
@inject AppState appState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<form>
    <h1>Log in </h1>
    <div class="form-group">
        <label for="email">Email</label>
        <input type="text" name="email" placeholder="Email" class="form-control" bind="@Email" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" name="password" placeholder="Password" class="form-control" bind="@Password" />
    </div>

    @if (!string.IsNullOrEmpty(error))
    {
        <br />
        <div class="alert alert-danger" role="alert">
            <br />
            <p class="font-italic">@error</p>
        </div>
    }

    <button type="button" class="btn btn-primary" onclick="@SubmitForm">Log in</button>
</form>

@functions{
    public string Email { get; set; } = "";
    public string Password { get; set; } = "";
    string error = "";

    protected override void OnInit()
    {
        if (appState.IsUserLoggedIn)
        {
            UriHelper.NavigateTo($"/alreadylogged");
        }
    }

    private async Task SubmitForm()
    {
        error = "";
        var tokenvm = new TokenViewModel
        {
            Email = Email,
            Password = Password
        };
        TokenResponse response = null;
        var r = await Http.PostAsync("http://localhost:5000/api/token/login", new StringContent(Json.Serialize(tokenvm), System.Text.Encoding.UTF8, "application/json"));
        if (r.IsSuccessStatusCode)
        {
            response = Json.Deserialize<TokenResponse>(await r.Content.ReadAsStringAsync());
        }
        else
        {
            var content = r.Content.ReadAsStringAsync();
            error = content.Result + ".";
            return;
        }
        Console.WriteLine(response.Token);

        await tokenService.SaveAccessToken(response.Token);
        appState.LogUser(response.Token);
        await reloadService.ReloadPage();
        UriHelper.NavigateTo("/myprofile");
    }

    private class TokenResponse
    {
        public string Token;
    }
}