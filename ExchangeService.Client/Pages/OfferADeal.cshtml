@using ExchangeService.Shared.Resources;
@using ExchangeService.Shared.Enums;
@using ExchangeService.Client.Services;
@page "/offerdeal/{UserId}"
@inject HttpClient Http
@inject TokenService tokenService
@inject AppState appState

<h5>Offer an exchange</h5>

@if (myProfile == null || otherUser == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (visiblePageNumber == 1)
    {
        <h5>1. Select games</h5>
        <table>
            <tbody>
                <tr>
                    <td>
                        <img src="@myProfile.ImageUrl" width="150" height="150">
                        <h5>@myProfile.Name @myProfile.Surname</h5>
                        <h6>! @myProfile.Location</h6>
                        <p>Exchanges made: @myProfile.ExchangesCount</p>
                        <p>Reviews: @myProfile.ReviewsCount</p>
                        <p>STARS @myProfile.AvgMark</p>
                    </td>
                    <td>
                        @foreach(var myGame in myGames)
                        {
                            <input type="checkbox" checked="@(myGamesIds.Contains(myGame.GameId))" onchange="@(() => ToogleMyGamesForExchange(myGame))" />@myGame.Title <br />
                        }
                    </td>
                    <td>
                        |
                    </td>
                    <td>
                        @foreach (var otherGame in otherGames)
                        {
                            <input type="checkbox" checked="@(otherGamesIds.Contains(otherGame.GameId))" onchange="@(() => ToogleOtherGamesForExchange(otherGame))" />@otherGame.Title <br />
                        }
                    </td>
                    <td>
                        <img src="@otherUser.ImageUrl" width="150" height="150">
                        <h5>@otherUser.Name @otherUser.Surname</h5>
                        <h6>! @otherUser.Location</h6>
                        <p>Exchanges made: @otherUser.ExchangesCount</p>
                        <p>Reviews: @otherUser.ReviewsCount</p>
                        <p>STARS @otherUser.AvgMark</p>
                    </td>
                </tr>
            </tbody>
        </table>
        @if (myGamesIds.Count() > 0 && otherGamesIds.Count() > 0 )
        {
            <button onclick=@(() => MoveToNext())>Next</button>
        }
    }

    @if (visiblePageNumber == 2)
    {
        <h5>2. Choose shippment type</h5>
        <form action="">
            <input type="radio" name="shipping" onchange="@(() => { isPickup = true; isDelivery = false; })" checked="@isPickup" /> PickUp <br>
            <input type="radio" name="shipping" onchange="@(() => { isDelivery = true; isPickup = false; })" checked="@isDelivery" /> Delivery <br>
        </form>
        <button onclick=@(() => MoveToPrevious())>Previous</button>
        @if (isDelivery || isPickup)
        {
            <button onclick=@(() => MoveToNext())>Next</button>
        }
    }

    @if (visiblePageNumber == 3)
    {
        @if (isDelivery)
        {
            <h5>3. Provide address for package delivery</h5>
        }
        else
        {
            <h5>3. Provide contact details to discuss the pickup</h5>
        }
        <input type="text" bind="@firstUserContactInfo" />
        <button onclick=@(() => MoveToPrevious())>Previous</button>
        <button onclick=@(() => ShowSummary())>Show summary</button>
    }

    @if (visiblePageNumber == 4)
    {
        <h5>4. Exchange summary</h5>

        <table>
            <tbody>
                <tr>
                    <td>
                        <img src="@myProfile.ImageUrl" width="150" height="150">
                        <h5>@myProfile.Name @myProfile.Surname</h5>
                        <h6>! @myProfile.Location</h6>
                        <p>Exchanges made: @myProfile.ExchangesCount</p>
                        <p>Reviews: @myProfile.ReviewsCount</p>
                        <p>STARS @myProfile.AvgMark</p>
                    </td>
                    <td>
                        <table>
                            <tbody>
                                <tr>
                                    <td>
                                        Games you give away:
                                        @foreach (var gameId in exchange.MyGamesIds)
                                        {
                                            <p>@myGames.SingleOrDefault(g => g.GameId == Int32.Parse(gameId)).Title</p>
                                        }
                                    </td>
                                    <td>
                                        Games you get:
                                        @foreach (var gameId in exchange.OtherUserGamesIds)
                                        {
                                            <p>@otherGames.SingleOrDefault(g => g.GameId == Int32.Parse(gameId)).Title</p>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        Type of exchange:
                                        <p>@exchange.Shipment</p>
                                    </td>
                                    <td>
                                        @if (exchange.Shipment == Shipment.Delivery)
                                        {
                                            <p>Your delivery adress:</p>
                                        }
                                        else
                                        {
                                            <p>Your contact details:</p>
                                        }
                                        <p>@firstUserContactInfo</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                    <td>
                        <img src="@otherUser.ImageUrl" width="150" height="150">
                        <h5>@otherUser.Name @otherUser.Surname</h5>
                        <h6>! @otherUser.Location</h6>
                        <p>Exchanges made: @otherUser.ExchangesCount</p>
                        <p>Reviews: @otherUser.ReviewsCount</p>
                        <p>STARS @otherUser.AvgMark</p>
                    </td>
                </tr>
            </tbody>
        </table>

        <button onclick=@(() => MoveToPrevious())>Previous</button>
        <button onclick=@(async () => await OfferAnExchange())>Offer an exchange</button>
    }

    @if (visiblePageNumber == 5)
    {
        <h5>5. Exchange was registered</h5>
    }
}

@functions {
    [Parameter]
    string UserId { get; set; }

    ExchangeDto exchange;

    UserView myProfile;
    UserView otherUser;
    UserGameView[] myGames;
    UserGameView[] otherGames;
    int visiblePageNumber = 1;

    bool[] areSelectedMyGames;
    bool[] areSelectedOtherGames;

    List<int> myGamesIds = new List<int>();
    List<int> otherGamesIds = new List<int>();

    bool isPickup;
    bool isDelivery;

    string firstUserContactInfo;

    protected override async Task OnInitAsync()
    {
        appState.TrySetAccessTokens();
        myProfile = await appState.GetMyProfile();
        int otherUserId = Int32.Parse(UserId);
        otherUser = await Http.GetJsonAsync<UserView>("http://localhost:5000/api/users/" + otherUserId);

        var mine = await Http.GetJsonAsync<IEnumerable<UserGameView>>("http://localhost:5000/api/users/games/" + myProfile.UserId);
        myGames = mine.ToArray();
        var other = await Http.GetJsonAsync<IEnumerable<UserGameView>>("http://localhost:5000/api/users/games/" + otherUser.UserId);
        otherGames = other.ToArray();

        areSelectedMyGames = new bool[myGames.Count()];
        areSelectedOtherGames = new bool[otherGames.Count()];
        exchange = new ExchangeDto();
    }

    private void MoveToNext()
    {
        visiblePageNumber++;
    }

    private void MoveToPrevious()
    {
        visiblePageNumber--;
    }

    private async Task OfferAnExchange()
    {
        string offering = exchange.MyGamesIds.Count() > 1 ? string.Join(",", exchange.MyGamesIds) : exchange.MyGamesIds[0].ToString();
        string others = exchange.OtherUserGamesIds.Count() > 1 ? string.Join(",", exchange.OtherUserGamesIds) : exchange.OtherUserGamesIds[0].ToString();

        Console.WriteLine(offering);
        Console.WriteLine(others);
        await Http.PostJsonAsync("http://localhost:5000/api/users/exchanges", exchange);
        MoveToNext();
    }

    private void ShowSummary()
    {
        exchange.OtherUserId = Int32.Parse(UserId);
        MoveToNext();
        SetUpGames();
        SetUpShippment();
    }

    private void SetUpGames()
    {
        //var myGamesIndexes = new List<string>();
        //for (int i = 0; i < myGames.Count(); i++)
        //{
        //    if (areSelectedMyGames[i] == true) myGamesIndexes.Add(myGames[i].GameId.ToString());
        //}
        //exchange.MyGamesIds = myGamesIndexes.ToArray();
        //var otherGamesIndexes = new List<string>();
        //for (int i = 0; i < otherGames.Count(); i++)
        //{
        //    if (areSelectedOtherGames[i] == true) otherGamesIndexes.Add(otherGames[i].GameId.ToString());
        //}
        //exchange.OtherUserGamesIds = otherGamesIndexes.ToArray();
        exchange.MyGamesIds = myGamesIds.Select(g => g.ToString()).ToArray();
        Console.WriteLine(myGamesIds);
        exchange.OtherUserGamesIds = otherGamesIds.Select(g => g.ToString()).ToArray();
    }

    private void SetUpShippment()
    {
        if (isPickup)
            exchange.Shipment = Shipment.Pickup;
        else
            exchange.Shipment = Shipment.Delivery;
        exchange.OfferingUserContactInfo = firstUserContactInfo;
    }

    private void ToogleMyGamesForExchange(UserGameView game)
    {
        if (myGamesIds.Contains(game.GameId))
            myGamesIds.Remove(game.GameId);
        else
            myGamesIds.Add(game.GameId);
        StateHasChanged();
    }

    private void ToogleOtherGamesForExchange(UserGameView game)
    {
        if (otherGamesIds.Contains(game.GameId))
            otherGamesIds.Remove(game.GameId);
        else
            otherGamesIds.Add(game.GameId);
        StateHasChanged();
    }
}

